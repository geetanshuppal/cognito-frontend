{"ast":null,"code":"var _jsxFileName = \"/Users/ankurj/Desktop/Personal/react-cognito/src/contexts/userContext.tsx\",\n    _s = $RefreshSig$();\n\n// src/UserContext.tsx\nimport React, { createContext, useState, useEffect } from 'react';\nimport axios from 'axios'; // Define the shape of the user data\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst API_BASE_URL = 'https://llqwp3a2sg.execute-api.us-east-2.amazonaws.com/stage/api';\nexport const UserContext = /*#__PURE__*/createContext(undefined);\nexport const UserProvider = ({\n  children\n}) => {\n  _s();\n\n  const [users, setUsers] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    const fetchUsers = async () => {\n      try {\n        const response = await axios.get(API_BASE_URL);\n        setUsers(response.data);\n      } catch (err) {\n        setError('Failed to fetch users');\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchUsers();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(UserContext.Provider, {\n    value: {\n      users,\n      loading,\n      error\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 9\n  }, this);\n};\n\n_s(UserProvider, \"vvG5G9m+JVa2SSWAm277lQVAKio=\");\n\n_c = UserProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"UserProvider\");","map":{"version":3,"sources":["/Users/ankurj/Desktop/Personal/react-cognito/src/contexts/userContext.tsx"],"names":["React","createContext","useState","useEffect","axios","API_BASE_URL","UserContext","undefined","UserProvider","children","users","setUsers","loading","setLoading","error","setError","fetchUsers","response","get","data","err"],"mappings":";;;AAAA;AAEA,OAAOA,KAAP,IAAgBC,aAAhB,EAA+BC,QAA/B,EAAyCC,SAAzC,QAAqE,OAArE;AACA,OAAOC,KAAP,MAAkB,OAAlB,C,CAEA;;;AAgBA,MAAMC,YAAY,GAAG,kEAArB;AAGA,OAAO,MAAMC,WAAW,gBAAGL,aAAa,CAA8BM,SAA9B,CAAjC;AAMP,OAAO,MAAMC,YAAyC,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAkB;AAAA;;AACvE,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBT,QAAQ,CAAS,EAAT,CAAlC;AACA,QAAM,CAACU,OAAD,EAAUC,UAAV,IAAwBX,QAAQ,CAAU,IAAV,CAAtC;AACA,QAAM,CAACY,KAAD,EAAQC,QAAR,IAAoBb,QAAQ,CAAgB,IAAhB,CAAlC;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACZ,UAAMa,UAAU,GAAG,YAAY;AAC3B,UAAI;AACA,cAAMC,QAAQ,GAAG,MAAMb,KAAK,CAACc,GAAN,CAAkBb,YAAlB,CAAvB;AACAM,QAAAA,QAAQ,CAACM,QAAQ,CAACE,IAAV,CAAR;AACH,OAHD,CAGE,OAAOC,GAAP,EAAY;AACVL,QAAAA,QAAQ,CAAC,uBAAD,CAAR;AACH,OALD,SAKU;AACNF,QAAAA,UAAU,CAAC,KAAD,CAAV;AACH;AACJ,KATD;;AAWAG,IAAAA,UAAU;AACb,GAbQ,EAaN,EAbM,CAAT;AAeA,sBACI,QAAC,WAAD,CAAa,QAAb;AAAsB,IAAA,KAAK,EAAE;AAAEN,MAAAA,KAAF;AAASE,MAAAA,OAAT;AAAkBE,MAAAA;AAAlB,KAA7B;AAAA,cACKL;AADL;AAAA;AAAA;AAAA;AAAA,UADJ;AAKH,CAzBM;;GAAMD,Y;;KAAAA,Y","sourcesContent":["// src/UserContext.tsx\n\nimport React, { createContext, useState, useEffect, ReactNode } from 'react';\nimport axios from 'axios';\n\n// Define the shape of the user data\ninterface User {\n    firstName: string;\n    lastName: string;\n    email: string;\n    mobileNumber: string;\n    role: string;\n}\n\n// Define the shape of the context\ninterface UserContextType {\n    users: User[];\n    loading: boolean;\n    error: string | null;\n}\n\nconst API_BASE_URL = 'https://llqwp3a2sg.execute-api.us-east-2.amazonaws.com/stage/api';\n\n\nexport const UserContext = createContext<UserContextType | undefined>(undefined);\n\ninterface UserProviderProps {\n    children: ReactNode;\n}\n\nexport const UserProvider: React.FC<UserProviderProps> = ({ children }) => {\n    const [users, setUsers] = useState<User[]>([]);\n    const [loading, setLoading] = useState<boolean>(true);\n    const [error, setError] = useState<string | null>(null);\n\n    useEffect(() => {\n        const fetchUsers = async () => {\n            try {\n                const response = await axios.get<User[]>(API_BASE_URL);  \n                setUsers(response.data);\n            } catch (err) {\n                setError('Failed to fetch users');\n            } finally {\n                setLoading(false);\n            }\n        };\n\n        fetchUsers();\n    }, []);\n\n    return (\n        <UserContext.Provider value={{ users, loading, error }}>\n            {children}\n        </UserContext.Provider>\n    );\n};\n "]},"metadata":{},"sourceType":"module"}